#!/usr/bin/env php
<?php
declare(strict_types=1);

require(implode(DIRECTORY_SEPARATOR, array(
    __DIR__,
    '..',
    '..',
    'vendor',
    'autoload.php'
)));

use PROVISION\TFTP;
use PROVISION\ConfigParser;
use PROVISION\Resolve;
use PROVISION\Logger;
use PROVISION\Utils;

class TFTPProvisioner extends TFTP\Server
{
  private $_debug;
  private $_resolve;
  private $_settings_path;

  function __construct($server_url, $config, $logger = NULL, $debug = false)
  {
    $this->_config = $config;
    if (!$logger) {
      $logger = new Logger_NULL('LOG_ERROR');
    }
    parent::__construct($server_url, $logger);
    $this->_debug = $debug;
    $this->max_put_size = 60000000;
    $this->_resolve = new Resolve($config);
    $this->_settings_path = $this->_config['main']['base_path'] . DIRECTORY_SEPARATOR
                . $this->_config['subdirs']['settings']['path'] . DIRECTORY_SEPARATOR;
  }

  public function writable($peer, $req_filename)
  {
    $filename = $this->_settings_path . basename($req_filename);
    if (file_exists($filename)) {
      return is_writable($filename);
    }
    return is_writable($this->_settings_path);
  }

  public function get($peer, $req_filename, $mode)
  {
    $filename = $this->_resolve->resolve($req_filename);
    if (file_exists($filename) && is_readable($filename))
      return file_get_contents($filename);
    return false;
  }

  public function put($peer, $req_filename, $mode, $content)
  {
    // (SPA phones can write to tftpboot -> redirect PUT request to 'settings' folder)
    $filename = $this->_settings_path . basename($req_filename);
    return file_put_contents($filename, $content);
  }

  /*
   * STDOUT Log functions
   */
  private function log($peer, $level, $message)
  {
    echo(date("H:i:s") . " $level $peer $message\n");
  }

  public function log_debug($peer, $message)
  {
    if($this->_debug)
      $this->log($peer, "D", $message);
  }

  public function log_info($peer, $message)
  {
    $this->log($peer, "I", $message);
  }

  public function log_warning($peer, $message)
  {
    $this->log($peer, "W", $message);
  }

  public function log_error($peer, $message)
  {
    $this->log($peer, "E", $message);
  }

}

$host = "127.0.0.1";
$port = 10069;
$url = "udp://$host:$port";
$base_path = realpath(__DIR__ . DIRECTORY_SEPARATOR . "../..");

echo "\nStarting TFTP Provisioner...\n";
$configParser = new ConfigParser($base_path, "config.ini");
$server = new TFTPProvisioner($url, $configParser->getConfiguration(), $logger);
if(!$server->loop($error))
  die("$error\n");
?>

